server {
       listen         80;
       server_name    mazachain.yourdomain.com;
       return         301 https://$server_name$request_uri;
}


server {
    listen 443 ssl;
    #http2; 
    server_name mazachain.yourdomain.com;
    port_in_redirect off;
    server_tokens off;
    add_header X-Frame-Options "SAMEORIGIN";
    add_header X-XSS-Protection "1; mode=block";

    # optional since http2 and alpn
    add_header Alternate-Protocol 443:h2;
    add_header Strict-Transport-Security "max-age=31536000; includeSubdomains;";

    ssl on;
    ssl_certificate /etc/letsencrypt/live/mazachain_yourdomain_com/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/mazachain_yourdomain_com/privkey.pem;
    ssl_protocols     TLSv1 TLSv1.1 TLSv1.2;
    ssl_dhparam    /etc/nginx/ssl/dhparams.pem;
    ssl_prefer_server_ciphers   on;
    #ssl_ciphers AESGCM:HIGH:!aNULL:!MD5;
    ssl_ciphers 'ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-DSS-AES128-GCM-SHA256:kEDH+AESGCM:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-DSS-AES128-SHA256:DHE-RSA-AES256-SHA256:DHE-DSS-AES256-SHA:DHE-RSA-AES256-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:AES:CAMELLIA:DES-CBC3-SHA:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!aECDH:!EDH-DSS-DES-CBC3-SHA:!EDH-RSA-DES-CBC3-SHA:!KRB5-DES-CBC3-SHA';
    # ssl_ciphers "EECDH+ECDSA+AESGCM EECDH+aRSA+AESGCM EECDH+ECDSA+SHA384 EECDH+ECDSA+SHA256 EECDH+aRSA+SHA384 EECDH+aRSA+SHA256 EECDH+aRSA+RC4 EECDH EDH+aRSA HIGH !RC4 !aNULL !eNULL !LOW !3DES !MD5 !EXP !PSK !SRP !DSS";

    #server_name_in_redirect off;

    access_log /dev/stdout;

    root /var/www/mazachain.yourdomain.com;
    error_page 401 403 404 /404.html;

    # Only allow GET HEAD POST
    if ($request_method !~ ^(GET|HEAD|POST)$ )
    {
       return 405;
    }

    location  /  {
        proxy_pass                          http://explorer;
    #    proxy_set_header  Host              $http_host;   # required for docker client's sake
    #    proxy_set_header  X-Real-IP         $remote_addr; # pass on real client's IP
    #    proxy_set_header  X-Forwarded-For   $proxy_add_x_forwarded_for;
    #    proxy_set_header  X-Forwarded-Proto $scheme;
        proxy_read_timeout                  900;
    }
}
